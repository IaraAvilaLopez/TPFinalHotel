from datetime import datetime, time

class Huesped:
    def __init__(self, nombre, apellido, dni, correo):
        self.nombre = nombre
        self.apellido = apellido
        self.dni = dni
        self.correo = correo

    def __str__(self):
        return f"{self.nombre} {self.apellido} | DNI: {self.dni} | Email: {self.correo}"

class Habitacion:
    PRECIO_BASE = 100000  
    MULTIPLICADORES = {1: 0.8, 2: 1.0, 3: 1.3}

    def __init__(self, piso, numero, tipo):
        self.piso = piso
        self.numero = numero
        self.tipo = tipo
        self.estado = "libre"
        self.huespedes = []
        self.fecha_ingreso = None

    def capacidad_maxima(self):
        return 2 if self.tipo == "doble" else 3

    def esta_llena(self):
        return len(self.huespedes) >= self.capacidad_maxima()

    def agregar_huesped(self, huesped):
        if self.esta_llena():
            raise ValueError("Capacidad m√°xima alcanzada.")
        self.huespedes.append(huesped)

    def check_in(self):
        if self.estado == "ocupada":
            raise Exception("La habitaci√≥n ya est√° ocupada.")
        if not self.huespedes:
            raise Exception("No hay hu√©spedes registrados.")
        self.estado = "ocupada"
        self.fecha_ingreso = datetime.now()

    def check_out(self):
        if self.estado != "ocupada":
            raise Exception("La habitaci√≥n no est√° ocupada.")
        ahora = datetime.now()
        diferencia = ahora - self.fecha_ingreso
        noches = diferencia.days
        hora_limite = time(10, 0)

        if noches == 0 and ahora.time() > hora_limite:
            noches = 0.5
        elif noches > 0 and ahora.time() > hora_limite:
            noches += 0.5

        precio_noche = self.obtener_precio()
        total = noches * precio_noche

        self.estado = "libre"
        self.huespedes.clear()
        self.fecha_ingreso = None

        return total, noches

    def obtener_precio(self):
        cantidad = len(self.huespedes)
        multiplicador = self.MULTIPLICADORES.get(cantidad, 0)
        return self.PRECIO_BASE * multiplicador

    def mostrar_info(self):
        print(f"\n Habitaci√≥n {self.numero} - Piso {self.piso} - Tipo: {self.tipo}")
        print(f" Estado: {self.estado}")
        print(" Hu√©spedes:")
        if not self.huespedes:
            print("  - Ninguno")
        for h in self.huespedes:
            print(f"  - {h}")

class Hotel:
    def __init__(self):
        self.habitaciones = {}

    def agregar_habitacion(self, habitacion):
        if habitacion.numero in self.habitaciones:
            raise ValueError("Ya existe una habitaci√≥n con ese n√∫mero.")
        self.habitaciones[habitacion.numero] = habitacion

    def obtener_habitacion(self, numero):
        return self.habitaciones.get(numero)

    def imprimir_habitaciones(self):
        if not self.habitaciones:
            print("‚ö†Ô∏è  No hay habitaciones registradas.")
            return
        print("\nüè® Lista de Habitaciones:")
        for hab in self.habitaciones.values():
            estado_icono = "‚úÖ" if hab.estado == "libre" else "‚õî"
            print(f"  {estado_icono} Habitaci√≥n {hab.numero} | Piso: {hab.piso} | Tipo: {hab.tipo} | Estado: {hab.estado}")

def menu_principal():
    hotel = Hotel()
    while True:
        print("\n--- üßæ MEN√ö PRINCIPAL ---")
        hotel.imprimir_habitaciones()
        print("1. Agregar habitaci√≥n")
        print("2. Gestionar habitaci√≥n")
        print("3. Salir")
        opcion = input("Ingrese una opci√≥n: ")

        try:
            if opcion == "1":
                crear_habitacion(hotel)
            elif opcion == "2":
                gestionar_habitacion(hotel)
            elif opcion == "3":
                print("Cerrando el sistema. ¬°Hasta pronto!")
                break
            else:
                print("‚ùå Opci√≥n inv√°lida.")
        except Exception as e:
            print(f" Error: {e}")

def crear_habitacion(hotel):
    try:
        piso = int(input("Piso: "))
        numero = int(input("N√∫mero de habitaci√≥n: "))
        tipo = input("Tipo ('doble' o 'triple'): ").strip().lower()
        if tipo not in ["doble", "triple"]:
            raise ValueError("Tipo no v√°lido.")
        habitacion = Habitacion(piso, numero, tipo)
        hotel.agregar_habitacion(habitacion)
        print("‚úÖ Habitaci√≥n agregada correctamente.")
    except ValueError as e:
        print(f" Error de entrada: {e}")

def gestionar_habitacion(hotel):
    try:
        numero = int(input("Ingrese el n√∫mero de habitaci√≥n: "))
        habitacion = hotel.obtener_habitacion(numero)
        if not habitacion:
            print("‚ùå Habitaci√≥n no encontrada.")
            return

        while True:
            print(f"\n--- MEN√ö HABITACI√ìN {habitacion.numero} ---")
            hotel.imprimir_habitaciones()
            print("1. Agregar hu√©sped")
            print("2. Check-in")
            print("3. Check-out")
            print("4. Ver detalles")
            print("5. Volver")
            opcion = input("Seleccione una opci√≥n: ")

            if opcion == "1":
                if habitacion.esta_llena():
                    print("‚ö†Ô∏è Capacidad m√°xima alcanzada.")
                    continue
                nombre = input("Nombre: ")
                apellido = input("Apellido: ")
                dni = input("DNI: ")
                correo = input("Correo: ")
                huesped = Huesped(nombre, apellido, dni, correo)
                habitacion.agregar_huesped(huesped)
                print("‚úÖ Hu√©sped agregado.")
            elif opcion == "2":
                habitacion.check_in()
                print("üü© Check-in realizado correctamente.")
            elif opcion == "3":
                total, noches = habitacion.check_out()
                print(f"üßæ Total a pagar por {noches} noches: ${total:.2f}")
            elif opcion == "4":
                habitacion.mostrar_info()
            elif opcion == "5":
                break
            else:
                print("‚ùå Opci√≥n inv√°lida.")
    except Exception as e:
        print(f" Error: {e}")

if __name__ == "__main__":
    menu_principal()
