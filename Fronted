"""
Frontend Tkinter para TPFinalHotel
----------------------------------
‚Ä¢ Muestra el hotel en forma matricial con colores por estado
  - Verde  : libre
  - Azul   : reservada
  - Rojo   : ocupada
‚Ä¢ Permite configurar al inicio cu√°ntas habitaciones dobles y triples tendr√° el hotel.
‚Ä¢ Al hacer clic sobre cada habitaci√≥n se muestran las acciones:
  - Ver detalle (hu√©spedes, estado, check-in y check-out)
  - Agregar hu√©sped
  - Ver precio estimado

Requiere el archivo backend.py (con las clases Habitacion, Huesped, Hotel) en el mismo directorio.
"""

import tkinter as tk
from tkinter import messagebox, simpledialog
from backend import Hotel, Habitacion, Huesped
from datetime import datetime, timedelta, time

# ------------------- Configuraci√≥n inicial del hotel ------------------- #

def inicializar_hotel() -> Hotel:
    hotel = Hotel()
    dobles = simpledialog.askinteger("Configurar hotel", "Cantidad de habitaciones DOBLES:", minvalue=0)
    if dobles is None:
        return hotel
    triples = simpledialog.askinteger("Configurar hotel", "Cantidad de habitaciones TRIPLES:", minvalue=0)
    if triples is None:
        return hotel

    piso = 1
    numero_en_piso = 1
    def siguiente_numero():
        nonlocal piso, numero_en_piso
        num = piso * 100 + numero_en_piso
        numero_en_piso += 1
        if numero_en_piso > 9:
            piso += 1
            numero_en_piso = 1
        return num

    for _ in range(dobles):
        hab = Habitacion(piso, siguiente_numero(), "doble")
        hotel.agregar_habitacion(hab)
    for _ in range(triples):
        hab = Habitacion(piso, siguiente_numero(), "triple")
        hotel.agregar_habitacion(hab)

    return hotel

# --------------------- Ventanas y l√≥gica de UI ------------------------ #

COLOR_ESTADO = {
    "libre": "#4CAF50",
    "reservada": "#2196F3",
    "ocupada": "#F44336",
}

hotel = inicializar_hotel()

# A√±adimos atributo din√°mico para fecha de salida esperada
for hab in hotel.habitaciones:
    hab.fecha_salida_esperada = None

def detalle_habitacion(hab: Habitacion):
    vent = tk.Toplevel()
    vent.title(f"Habitaci√≥n {hab.numero}")

    tk.Label(
        vent,
        text=f"Hab. {hab.numero} ‚Ä¢ Piso {hab.piso} ‚Ä¢ Tipo {hab.tipo.upper()}",
        font=("Helvetica", 14, "bold"),
    ).pack(pady=5)
    estado_lbl = tk.Label(
        vent,
        text=f"Estado: {hab.estado.upper()}",
        fg="white",
        bg=COLOR_ESTADO[hab.estado],
        width=20,
        font=("Helvetica", 12),
    )
    estado_lbl.pack(pady=(0, 10))

    if hab.fecha_ingreso:
        tk.Label(vent, text=f"Check-in: {hab.fecha_ingreso.strftime('%d/%m/%Y %H:%M')}").pack()
    if hasattr(hab, "fecha_salida_esperada") and hab.fecha_salida_esperada:
        tk.Label(vent, text=f"Check-out esperado: {hab.fecha_salida_esperada.strftime('%d/%m/%Y %H:%M')}").pack()

    frame_huesp = tk.Frame(vent)
    frame_huesp.pack(pady=5)
    tk.Label(frame_huesp, text="Hu√©spedes:").pack()
    if hab.huespedes:
        for h in hab.huespedes:
            tk.Label(frame_huesp, text=f"‚Ä¢ {h.nombre} {h.apellido} - DNI {h.dni}").pack(anchor="w")
    else:
        tk.Label(frame_huesp, text="(sin hu√©spedes)").pack()

    btn_frame = tk.Frame(vent)
    btn_frame.pack(pady=10)

    

    def refrescar():
        vent.destroy()
        detalle_habitacion(hab)

    def agregar_huesped_win():
        disponibles = hab.capacidad_maxima() - len(hab.huespedes)
        if disponibles <= 0:
            messagebox.showerror("Capacidad llena", "No se pueden agregar m√°s hu√©spedes.")
            return

        win = tk.Toplevel()
        win.title("Agregar hu√©sped")

        entries = []
        for i in range(disponibles):
            frame = tk.LabelFrame(win, text=f"Hu√©sped {i+1}")
            frame.pack(padx=10, pady=5)
            datos = {}
            for campo in ["Nombre", "Apellido", "DNI", "Correo"]:
                tk.Label(frame, text=campo+":").pack()
                entry = tk.Entry(frame)
                entry.pack()
                datos[campo.lower()] = entry
            entries.append(datos)

        def guardar_todos():
            for datos in entries:
                h = Huesped(
                    datos["nombre"].get(),
                    datos["apellido"].get(),
                    datos["dni"].get(),
                    datos["correo"].get(),
                )
                hab.agregar_huesped(h)
            messagebox.showinfo("√âxito", "Hu√©spedes agregados correctamente.")
            win.destroy()
            refrescar()

        tk.Button(win, text="Agregar todos", command=guardar_todos).pack(pady=10)

    def check_in_con_duracion():
        if hab.estado in ["reservada", "libre"]:
            noches = simpledialog.askinteger("Check-in", "¬øCu√°ntas noches se quedar√°n?", minvalue=1)
            if noches:
                hab.check_in()
                hab.fecha_salida_esperada = datetime.now().replace(hour=10, minute=0) + timedelta(days=noches)
                refrescar()
        else:
            messagebox.showerror("Error", "La habitaci√≥n ya est√° ocupada.")

    def mostrar_precio_estimado():
        cantidad = len(hab.huespedes)
        base = 100
        if hab.tipo == "doble":
            if cantidad == 1:
                precio = base * 0.8
            elif cantidad == 2:
                precio = base
            else:
                precio = 0
        elif hab.tipo == "triple":
            if cantidad == 1:
                precio = base * 0.8
            elif cantidad == 2:
                precio = base
            elif cantidad == 3:
                precio = base * 1.3
            else:
                precio = 0
        else:
            precio = 0

        if hasattr(hab, "fecha_salida_esperada") and hab.fecha_ingreso and hab.fecha_salida_esperada:
            diferencia = hab.fecha_salida_esperada - hab.fecha_ingreso
            noches = diferencia.days
        else:
            noches = 1

        total = noches * precio
        messagebox.showinfo("Precio estimado", f"Total estimado: ${total:.2f} por {noches} noche(s)")

    tk.Button(btn_frame, text="Agregar hu√©sped", command=agregar_huesped_win).grid(row=0, column=0, padx=5)
    tk.Button(btn_frame, text="Check-in", command=check_in_con_duracion).grid(row=0, column=1, padx=5)
    tk.Button(btn_frame, text="Check-out", command=lambda: (hab.check_out(), refrescar())).grid(row=0, column=2, padx=5)
    tk.Button(btn_frame, text="Ver precio", command=mostrar_precio_estimado).grid(row=1, column=0, columnspan=3, pady=10)

def mapa_habitaciones():
    vent = tk.Toplevel()
    vent.title("Mapa de habitaciones")

    if not hotel.habitaciones:
        tk.Label(vent, text="No hay habitaciones registradas.").pack(pady=10)
        return

    habs_ordenadas = sorted(hotel.habitaciones, key=lambda h: (h.piso, h.numero))
    columnas = 6
    for idx, hab in enumerate(habs_ordenadas):
        fila = idx // columnas
        col = idx % columnas
        btn = tk.Button(
            vent,
            text=str(hab.numero),
            width=8,
            height=3,
            bg=COLOR_ESTADO[hab.estado],
            fg="white",
            command=lambda h=hab: detalle_habitacion(h),
        )
        btn.grid(row=fila, column=col, padx=4, pady=4)

    leyenda = tk.Frame(vent)
    leyenda.pack(pady=10)
    for estado, color in COLOR_ESTADO.items():
        tk.Label(leyenda, text=" ", bg=color, width=2).pack(side="left", padx=(0, 2))
        tk.Label(leyenda, text=estado.capitalize()).pack(side="left", padx=(0, 10))

def ventana_principal():
    root = tk.Tk()
    root.title("Hotel App - Gesti√≥n")
    root.geometry("480x300")

    tk.Label(root, text="üè® Hotel App", font=("Helvetica", 18, "bold")).pack(pady=20)

    tk.Button(root, text="Ver mapa de habitaciones", width=30, command=mapa_habitaciones).pack(pady=10)

    def agregar_manual():
        ventana = tk.Toplevel()
        ventana.title("Agregar habitaci√≥n manual")

        for texto in ["Piso", "N√∫mero", "Tipo (doble/triple)"]:
            tk.Label(ventana, text=f"{texto}:").pack()
            entry = tk.Entry(ventana)
            entry.pack()
            setattr(ventana, f"entry_{texto.split()[0].lower()}", entry)

        def guardar():
            try:
                piso = int(ventana.entry_Piso.get())
                numero = int(ventana.entry_N√∫mero.get())
                tipo = ventana.entry_Tipo.get().lower()
                if tipo not in ("doble", "triple"):
                    raise ValueError("Tipo inv√°lido")
                hotel.agregar_habitacion(Habitacion(piso, numero, tipo))
                messagebox.showinfo("Listo", "Habitaci√≥n agregada")
                ventana.destroy()
            except Exception as e:
                messagebox.showerror("Error", str(e))

        tk.Button(ventana, text="Guardar", command=guardar).pack(pady=5)

    tk.Button(root, text="Agregar habitaci√≥n manual", width=30, command=agregar_manual).pack(pady=5)

    root.mainloop()

if __name__ == "__main__":
    ventana_principal()
